checkboxInput("ccol", "Cluster by Columns", value = TRUE),
checkboxInput("crow", "Cluster by Rows", value = TRUE)
),
mainPanel(
headerPanel("Single cell Heatmaps"),
p("Simply select which markers from the drop down panel you wish to assess and press 'Plot Heatmap' "),
p("It may take a while to process ( up to a few minutes) depending on the size of your file, so only click the button ONCE!"),
plotOutput("heatmap")
)
)),
tabPanel( title = "Cluster plotting over gates",
sidebarLayout(
sidebarPanel(
selectInput("markersx1", "x-axis", c(colnames(gt)), multiple = FALSE ),
selectInput("markersy1", "y-axis", c(colnames(gt)), multiple = FALSE ),
actionButton(inputId = "plotscatter",
label = "Plot Scatter Graph"),
textInput("scattertitle", "Insert title here",
value = "Delete this text and write your title"),
numericInput("kvalue", "How many clusters", value = 1),
actionButton(inputId = "phenotypes",
label = "Show cluster relative phenotypes"),
numericInput("clusternumber", "Which cluster phenotype", value = 1)
),
mainPanel(
plotOutput("scatter"),
plotOutput("phenotypes")
)
)
),
includeCSS("cyborg-theme2.css")
))
as.matrix(zt) -> zt
log10(zt) -> ztl
yt <-1:ncol(zt)
xt <- 1:nrow(zt)
as.matrix(zn) -> zn
log10(zn) -> znl
yn <-1:ncol(zn)
xn <- 1:nrow(zn)
server <- shinyServer(
function(input, output) {
observeEvent(input$Tum, {
output$contour <- renderPlot({
persp(xt,yt,ztl,
theta = input$theta, phi = input$phi, scale = FALSE,
main = input$s1title,
border = "cyan",shade = 0.2,col = "azure4")
})
})
observeEvent(input$NTB, {
output$contour <- renderPlot({
persp(xn,yn,znl,
theta = input$theta, phi = input$phi, scale = FALSE,
main = input$s2title,
border = "cyan",shade = 0.2,col = "azure4")
})
})
observeEvent(input$heat, {
output$heatmap <- renderPlot({
Heatmap(hts[,c(input$markers)], col = colorRamp2(c(-4, -2, 0, 2, 4),c("darkblue","cornflowerblue","white","chocolate1","firebrick")), input$heat1tit,
cluster_columns = input$ccol, cluster_rows = input$crow ,row_dend_width = unit(3,"cm"))
})
})
observeEvent(input$heat2, {
output$heatmap <- renderPlot({
Heatmap(hts2[,c(input$markers)], col = colorRamp2(c(-4, -2, 0, 2, 4),c("darkblue","cornflowerblue","white","chocolate1","firebrick")), input$heat2tit,
cluster_columns = input$ccol, cluster_rows = input$crow , row_dend_width = unit(3,"cm"))
})
})
observeEvent(input$plotscatter, {
output$scatter <- renderPlot({
kgt <- reactive(kmeans(gt, input$kvalue))
plot(log10(gt[,c(input$markersx1)]),log10(gt[,c(input$markersy1)]),
xlab = input$markersx,
ylab = input$markersy,
pch = 20,
main = input$scattertitle,
col = kgt()$cluster)
})
})
observeEvent(input$phenotypes, {
output$phenotypes <- renderPlot({
kgt <- reactive(kmeans(gt, input$kvalue))
barplot((as.matrix(kgt()$centers))[input$clusternumber,])
})
})
}
)
shinyApp(ui = ui, server = server)
library(shiny)
library(igraph)
library(circlize)
library(ComplexHeatmap)
library(dendextend)
setwd("~/Desktop/R work/PUT FILES IN HERE")
read.csv("Sample 1.csv") -> s1
apply(s1,2,mean) -> s1m
apply(s1,2,sd) -> s1s
scale(s1,s1m,s1s) -> s1scaled
as.data.frame(s1scaled) -> s1
SPADE <- function(x,k,mkrs){
#initial clustering and binning
dist(x[,c(mkrs)], method = "manhattan") -> distx
hclust(distx) -> clus_x
cutree(clus_x, k = k) ->cut_x
datalist = list()
for(i in 1:k){
dat = data.frame(colMeans(x[c(cut_x == i),mkrs]))
datalist[[i]] <- dat}
#cleaning data and assigning to data frame
big_data = do.call(cbind, datalist)
big_data = t(big_data)
clus_num <- c(1:k)
clus_names <- as.character(clus_num)
as.data.frame(big_data, row.names = c(clus_names)) -> cluster_means
# Heatmapping clusters for easy viewing
mypath4 <- file.path("~/Desktop","Lab R work","PUT FILES IN HERE",
"Images",paste("Heatmap_","cluster_", ".png", sep = ""))
png(file = mypath4)
heatmap(as.matrix(cluster_means), Colv = NA, col = My_Palette)
dev.off()
# Saving phenotypes as box and whisker graphs
for(i in 1:k){
mypath3 <- file.path("~/Desktop","Lab R work","PUT FILES IN HERE",
"Images",paste("phenotype_","cluster_", i, ".png", sep = ""))
png(file = mypath3, width = 1700, units = "px")
phedat = data.frame(x[c(cut_x == i),])
boxplot.matrix(as.matrix(phedat), cex = 0.5, pch = 20, las = 2,
main = paste("cluster",i, sep = " "))
dev.off()}
#calculating cluster distances and plotting
dist(cluster_means, method = "manhattan") -> distx1
graph.adjacency(as.matrix(distx1),mode="undirected",weighted=TRUE) -> adjgraph
SPADEgraph <-minimum.spanning.tree(adjgraph) %>%
set_vertex_attr("color", value = "cornflowerblue")
mypath2 <- file.path("~/Desktop","Lab R work","PUT FILES IN HERE",
"Images",paste("Network_", ".png", sep = ""))
png(file = mypath2)
plot(SPADEgraph)
dev.off()
plot(SPADEgraph)
}
PHESPADE <- function(x,k,clus,mkrs){
#initial clustering and binning
dist(x, method = "manhattan") -> distx
hclust(distx) -> clus_x
cutree(clus_x, k = k) ->cut_x
phedat = data.frame(x[c(cut_x == clus),])
boxplot.matrix(as.matrix(phedat[,c(mkrs)]), cex = 0.5, pch = 20, las = 2,
main = paste("cluster",clus, sep = " "))
}
My_Palette <- colorRampPalette(c("navy","aliceblue","bisque","chocolate1","firebrick"))(256)
ui <- shinyUI(navbarPage(title = "SPADE",
tabPanel(title = "SPADE",
sidebarLayout(
sidebarPanel(
selectInput("mkrs", "Select which markers to assess", c(colnames(s1)), multiple = TRUE ),
sliderInput(inputId = "kvalue",
label = "How many Clusters",
value = 50, min = 0, max = 200),
actionButton(inputId = "plotnetwork",
label = "Plot!"),
numericInput("clusternumber", "Which cluster phenotype", value = 1),
actionButton(inputId = "plotphe",
label = "Plot Phenotype")
),
mainPanel(
headerPanel("SPADE"),
p("Simply click on either Tumour or NTB to plot either tissue."),
p("Use the slide bar to choose a suitable number of clusters."),
p("Images will be exported to the", strong("images"), "folder of the working directory"),
plotOutput("Network"),
plotOutput("Phenotype")
)
)
),
includeCSS("cyborg-theme2.css")
)
)
server <- shinyServer(function(input, output) {
observeEvent(input$plotnetwork, {
output$Network <- renderPlot({
SPADE(s1, input$kvalue, input$mkrs)
})
})
observeEvent(input$plotphe, {
output$Phenotype <- renderPlot({
PHESPADE(s1, input$kvalue, input$clusternumber, input$mkrs)
})
})
})
shinyApp(ui = ui, server = server)
getwd()
library(scaffold)
scaffold.run()
getwed()
getwd()
library(shiny)
library(igraph)
library(circlize)
library(ComplexHeatmap)
library(dendextend)
setwd("~/Desktop/R work/PUT FILES IN HERE")
read.csv("Sample 1.csv") -> s1
apply(s1,2,mean) -> s1m
apply(s1,2,sd) -> s1s
scale(s1,s1m,s1s) -> s1scaled
as.data.frame(s1scaled) -> s1
SPADE <- function(x,k,mkrs){
#initial clustering and binning
dist(x[,c(mkrs)], method = "manhattan") -> distx
hclust(distx) -> clus_x
cutree(clus_x, k = k) ->cut_x
datalist = list()
for(i in 1:k){
dat = data.frame(colMeans(x[c(cut_x == i),mkrs]))
datalist[[i]] <- dat}
#cleaning data and assigning to data frame
big_data = do.call(cbind, datalist)
big_data = t(big_data)
clus_num <- c(1:k)
clus_names <- as.character(clus_num)
as.data.frame(big_data, row.names = c(clus_names)) -> cluster_means
# Heatmapping clusters for easy viewing
mypath4 <- file.path("~/Desktop","Lab R work","PUT FILES IN HERE",
"Images",paste("Heatmap_","cluster_", ".png", sep = ""))
png(file = mypath4)
heatmap(as.matrix(cluster_means), Colv = NA, col = My_Palette)
dev.off()
# Saving phenotypes as box and whisker graphs
for(i in 1:k){
mypath3 <- file.path("~/Desktop","Lab R work","PUT FILES IN HERE",
"Images",paste("phenotype_","cluster_", i, ".png", sep = ""))
png(file = mypath3, width = 1700, units = "px")
phedat = data.frame(x[c(cut_x == i),])
boxplot.matrix(as.matrix(phedat), cex = 0.5, pch = 20, las = 2,
main = paste("cluster",i, sep = " "))
dev.off()}
#calculating cluster distances and plotting
dist(cluster_means, method = "manhattan") -> distx1
graph.adjacency(as.matrix(distx1),mode="undirected",weighted=TRUE) -> adjgraph
SPADEgraph <-minimum.spanning.tree(adjgraph) %>%
set_vertex_attr("color", value = "cornflowerblue")
mypath2 <- file.path("~/Desktop","Lab R work","PUT FILES IN HERE",
"Images",paste("Network_", ".png", sep = ""))
png(file = mypath2)
plot(SPADEgraph)
dev.off()
plot(SPADEgraph)
}
PHESPADE <- function(x,k,clus,mkrs){
#initial clustering and binning
dist(x, method = "manhattan") -> distx
hclust(distx) -> clus_x
cutree(clus_x, k = k) ->cut_x
# phenotype outputs based on user choice
phedat = data.frame(x[c(cut_x == clus),])
boxplot.matrix(as.matrix(phedat[,c(mkrs)]), cex = 0.5, pch = 20, las = 2,
main = paste("cluster",clus, sep = " "))
}
My_Palette <- colorRampPalette(c("navy","aliceblue","bisque","chocolate1","firebrick"))(256)
ui <- shinyUI(navbarPage(title = "SPADE",
tabPanel(title = "SPADE",
sidebarLayout(
sidebarPanel(
selectInput("mkrs", "Select which markers to assess", c(colnames(s1)), multiple = TRUE ),
sliderInput(inputId = "kvalue",
label = "How many Clusters",
value = 50, min = 0, max = 200),
actionButton(inputId = "plotnetwork",
label = "Plot!"),
numericInput("clusternumber", "Which cluster phenotype", value = 1),
actionButton(inputId = "plotphe",
label = "Plot Phenotype")
),
mainPanel(
headerPanel("SPADE"),
p("Simply click on either Tumour or NTB to plot either tissue."),
p("Use the slide bar to choose a suitable number of clusters."),
p("Images will be exported to the", strong("images"), "folder of the working directory"),
plotOutput("Network"),
plotOutput("Phenotype")
)
)
),
includeCSS("cyborg-theme2.css")
)
)
server <- shinyServer(function(input, output) {
observeEvent(input$plotnetwork, {
output$Network <- renderPlot({
SPADE(s1, input$kvalue, input$mkrs)
})
})
observeEvent(input$plotphe, {
output$Phenotype <- renderPlot({
PHESPADE(s1, input$kvalue, input$clusternumber, input$mkrs)
})
})
})
shinyApp(ui = ui, server = server)
scaffold.run()
library(shiny)
library(igraph)
library(circlize)
library(ComplexHeatmap)
library(dendextend)
setwd("~/Desktop/R work/PUT FILES IN HERE")
read.csv("Sample 1.csv") -> s1
apply(s1,2,mean) -> s1m
apply(s1,2,sd) -> s1s
scale(s1,s1m,s1s) -> s1scaled
as.data.frame(s1scaled) -> s1
SPADE <- function(x,k,mkrs){
#initial clustering and binning
dist(x[,c(mkrs)], method = "manhattan") -> distx
hclust(distx) -> clus_x
cutree(clus_x, k = k) ->cut_x
datalist = list()
for(i in 1:k){
dat = data.frame(colMeans(x[c(cut_x == i),mkrs]))
datalist[[i]] <- dat}
#cleaning data and assigning to data frame
big_data = do.call(cbind, datalist)
big_data = t(big_data)
clus_num <- c(1:k)
clus_names <- as.character(clus_num)
as.data.frame(big_data, row.names = c(clus_names)) -> cluster_means
# Heatmapping clusters for easy viewing
mypath4 <- file.path("~/Desktop","Lab R work","PUT FILES IN HERE",
"Images",paste("Heatmap_","cluster_", ".png", sep = ""))
png(file = mypath4)
heatmap(as.matrix(cluster_means), Colv = NA, col = My_Palette)
dev.off()
# Saving phenotypes as box and whisker graphs
for(i in 1:k){
mypath3 <- file.path("~/Desktop","Lab R work","PUT FILES IN HERE",
"Images",paste("phenotype_","cluster_", i, ".png", sep = ""))
png(file = mypath3, width = 1700, units = "px")
phedat = data.frame(x[c(cut_x == i),])
boxplot.matrix(as.matrix(phedat), cex = 0.5, pch = 20, las = 2,
main = paste("cluster",i, sep = " "))
dev.off()}
#calculating cluster distances and plotting
dist(cluster_means, method = "manhattan") -> distx1
graph.adjacency(as.matrix(distx1),mode="undirected",weighted=TRUE) -> adjgraph
SPADEgraph <-minimum.spanning.tree(adjgraph) %>%
set_vertex_attr("color", value = "cornflowerblue")
mypath2 <- file.path("~/Desktop","Lab R work","PUT FILES IN HERE",
"Images",paste("Network_", ".png", sep = ""))
png(file = mypath2)
plot(SPADEgraph)
dev.off()
plot(SPADEgraph)
}
PHESPADE <- function(x,k,clus,mkrs){
#initial clustering and binning
dist(x, method = "manhattan") -> distx
hclust(distx) -> clus_x
cutree(clus_x, k = k) ->cut_x
# phenotype outputs based on user choice
phedat = data.frame(x[c(cut_x == clus),])
boxplot.matrix(as.matrix(phedat[,c(mkrs)]), cex = 0.5, pch = 20, las = 2,
main = paste("cluster",clus, sep = " "))
}
My_Palette <- colorRampPalette(c("navy","aliceblue","bisque","chocolate1","firebrick"))(256)
ui <- shinyUI(navbarPage(title = "SPADE",
tabPanel(title = "SPADE",
sidebarLayout(
sidebarPanel(
selectInput("mkrs", "Select which markers to assess", c(colnames(s1)), multiple = TRUE ),
sliderInput(inputId = "kvalue",
label = "How many Clusters",
value = 50, min = 0, max = 200),
actionButton(inputId = "plotnetwork",
label = "Plot!"),
numericInput("clusternumber", "Which cluster phenotype", value = 1),
actionButton(inputId = "plotphe",
label = "Plot Phenotype")
),
mainPanel(
headerPanel("SPADE"),
p("Simply click on either Tumour or NTB to plot either tissue."),
p("Use the slide bar to choose a suitable number of clusters."),
p("Images will be exported to the", strong("images"), "folder of the working directory"),
plotOutput("Network"),
plotOutput("Phenotype")
)
)
),
includeCSS("cyborg-theme2.css")
)
)
server <- shinyServer(function(input, output) {
observeEvent(input$plotnetwork, {
output$Network <- renderPlot({
SPADE(s1, input$kvalue, input$mkrs)
})
})
observeEvent(input$plotphe, {
output$Phenotype <- renderPlot({
PHESPADE(s1, input$kvalue, input$clusternumber, input$mkrs)
})
})
})
shinyApp(ui = ui, server = server)
library(shiny)
library(igraph)
library(circlize)
library(ComplexHeatmap)
library(dendextend)
setwd("~/Desktop/R work/PUT FILES IN HERE")
read.csv("Sample 1.csv") -> s1
apply(s1,2,mean) -> s1m
apply(s1,2,sd) -> s1s
scale(s1,s1m,s1s) -> s1scaled
as.data.frame(s1scaled) -> s1
SPADE <- function(x,k,mkrs){
#initial clustering and binning
dist(x[,c(mkrs)], method = "manhattan") -> distx
hclust(distx) -> clus_x
cutree(clus_x, k = k) ->cut_x
datalist = list()
for(i in 1:k){
dat = data.frame(colMeans(x[c(cut_x == i),mkrs]))
datalist[[i]] <- dat}
#cleaning data and assigning to data frame
big_data = do.call(cbind, datalist)
big_data = t(big_data)
clus_num <- c(1:k)
clus_names <- as.character(clus_num)
as.data.frame(big_data, row.names = c(clus_names)) -> cluster_means
# Heatmapping clusters for easy viewing
mypath4 <- file.path("~/Desktop","Lab R work","PUT FILES IN HERE",
"Images",paste("Heatmap_","cluster_", ".png", sep = ""))
png(file = mypath4)
heatmap(as.matrix(cluster_means), Colv = NA, col = My_Palette)
dev.off()
# Saving phenotypes as box and whisker graphs
for(i in 1:k){
mypath3 <- file.path("~/Desktop","Lab R work","PUT FILES IN HERE",
"Images",paste("phenotype_","cluster_", i, ".png", sep = ""))
png(file = mypath3, width = 1700, units = "px")
phedat = data.frame(x[c(cut_x == i),])
boxplot.matrix(as.matrix(phedat), cex = 0.5, pch = 20, las = 2,
main = paste("cluster",i, sep = " "))
dev.off()}
#calculating cluster distances and plotting
dist(cluster_means, method = "manhattan") -> distx1
graph.adjacency(as.matrix(distx1),mode="undirected",weighted=TRUE) -> adjgraph
SPADEgraph <-minimum.spanning.tree(adjgraph) %>%
set_vertex_attr("color", value = "cornflowerblue")
mypath2 <- file.path("~/Desktop","Lab R work","PUT FILES IN HERE",
"Images",paste("Network_", ".png", sep = ""))
png(file = mypath2)
plot(SPADEgraph)
dev.off()
plot(SPADEgraph)
}
PHESPADE <- function(x,k,clus,mkrs2){
#initial clustering and binning
dist(x, method = "manhattan") -> distx
hclust(distx) -> clus_x
cutree(clus_x, k = k) ->cut_x
# phenotype outputs based on user choice
phedat = data.frame(x[c(cut_x == clus),])
boxplot.matrix(as.matrix(phedat[,c(mkrs2)]), cex = 0.5, pch = 20, las = 2,
main = paste("cluster",clus, sep = " "))
}
My_Palette <- colorRampPalette(c("navy","aliceblue","bisque","chocolate1","firebrick"))(256)
ui <- shinyUI(navbarPage(title = "SPADE",
tabPanel(title = "SPADE",
sidebarLayout(
sidebarPanel(
selectInput("mkrs", "Select which markers to cluster", c(colnames(s1)), multiple = TRUE ),
sliderInput(inputId = "kvalue",
label = "How many Clusters",
value = 50, min = 0, max = 200),
actionButton(inputId = "plotnetwork",
label = "Plot!"),
numericInput("clusternumber", "Which cluster phenotype", value = 1),
selectInput("mkrs2", "Select which markers to assess", c(colnames(s1)), multiple = TRUE ),
actionButton(inputId = "plotphe",
label = "Plot Phenotype")
),
mainPanel(
headerPanel("SPADE"),
p("Simply click on either Tumour or NTB to plot either tissue."),
p("Use the slide bar to choose a suitable number of clusters."),
p("Images will be exported to the", strong("images"), "folder of the working directory"),
plotOutput("Network"),
plotOutput("Phenotype")
)
)
),
includeCSS("cyborg-theme2.css")
)
)
server <- shinyServer(function(input, output) {
observeEvent(input$plotnetwork, {
output$Network <- renderPlot({
SPADE(s1, input$kvalue, input$mkrs)
})
})
observeEvent(input$plotphe, {
output$Phenotype <- renderPlot({
PHESPADE(s1, input$kvalue, input$clusternumber, input$mkrs2)
})
})
})
shinyApp(ui = ui, server = server)
